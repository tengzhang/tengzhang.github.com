<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Zhang Teng'Bolg]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="//"/>
  <updated>2014-11-15T05:39:37.385Z</updated>
  <id>//</id>
  
  <author>
    <name><![CDATA[Zhang Teng]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Leetcode-MinStack]]></title>
    <link href="/2014/11/14/2014-11-13-MinStack/"/>
    <id>/2014/11/14/2014-11-13-MinStack/</id>
    <published>2014-11-14T15:55:37.000Z</published>
    <updated>2014-11-15T03:32:56.000Z</updated>
    <content type="html"><![CDATA[<p>先给出题目的地址吧:<a href="https://oj.leetcode.com/problems/min-stack/" target="_blank" rel="external">https://oj.leetcode.com/problems/min-stack/</a></p>
<a id="more"></a>

<p>昨天一个同学问了我这道题，回去就做了一下。<br>初看这道题，好像并不难，push、pop、top都是栈的基本操作，getMin好像不太好搞。<br>首先想到的是用一个变量min记录一下栈的最小值，每次压栈的时候比较压栈元素和min的大小，更新min值。<br>这个想法好像还不错，于是搞之，一交WA了。<br>仔细一想，如果当前的min值是栈顶的值，把栈顶的值pop之后，这个min值就不再是栈中最小的值了，此时最小值变成了栈中的次小值了。<br>自然就想到，能不能再记住次小值呢？当然是可以的。可是这样问题又来了，如果次小值再被弹出呢？那就不行了。<br>最后，想到的做法是，每次压栈的时候都去记住当前栈的最小值，把它记在栈顶上，这样栈顶就始终保存这当前栈的最小值。<br>于是，开开心心的去写代码，交之，TMD，居然告诉我MLE。<br>你大爷啊，这让我如何是好？<br>看了半天代码，实在没有内存需要优化的地方了。最后在内部类前面加了个<code>static</code>，然后就过了。<br>他就这么过了，加了个<code>static</code>为啥就过了呢？有点疑惑。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="code"><pre><span class="keyword">package</span> com.tcheung;

<span class="keyword">import</span> java.util.Stack;

<span class="javadoc">/**
 * MinStack
 *
 *<span class="javadoctag"> @author</span>: zhangteng
 *<span class="javadoctag"> @time</span>: 2014/11/14 21:12
 */</span>
class MinStack {

    <span class="keyword">static</span> class Element {
        <span class="keyword">int</span> val, min;
        <span class="keyword">public</span> <span class="title">Element</span>(<span class="keyword">int</span> val, <span class="keyword">int</span> min) {
            <span class="keyword">this</span>.val = val;
            <span class="keyword">this</span>.min = min;
        }
    }

    <span class="keyword">private</span> <span class="keyword">int</span> min;

    <span class="keyword">private</span> Stack&lt;Element&gt; stack = <span class="keyword">new</span> Stack&lt;Element&gt;();

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span>(<span class="keyword">int</span> x) {
        <span class="keyword">if</span> (stack.isEmpty()) {
            min = x;
        } <span class="keyword">else</span> {
            min = Math.min(stack.peek().min, x);
        }
        stack.push(<span class="keyword">new</span> Element(x, min));
    }

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span>() {
        stack.pop();
    }

    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span>() {
        <span class="keyword">return</span> stack.peek().val;
    }

    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span>() {
        <span class="keyword">return</span> stack.peek().min;
    }
}
</pre></td></tr></table></figure>
]]></content>
    <summary type="html"><![CDATA[<p>先给出题目的地址吧:<a href="https://oj.leetcode.com/problems/min-stack/" target="_blank" rel="external">https://oj.leetcode.com/problems/min-stack/</a></p>
]]></summary>
    
      <category term="leetcode" scheme="/tags/leetcode/"/>
    
      <category term="java" scheme="/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS安装多个Mysql]]></title>
    <link href="/2014/11/07/2014-11-07-cetos-install-muti-mysql/"/>
    <id>/2014/11/07/2014-11-07-cetos-install-muti-mysql/</id>
    <published>2014-11-07T12:57:05.000Z</published>
    <updated>2014-11-15T05:39:19.000Z</updated>
    <content type="html"><![CDATA[<p>安装的mysql占用端口分别为3306和3307</p>
<p>下载mysql-5.6.20-linux-glibc2.5-x86_64.tar.gz，这个是编译完的二进制包</p>
<p>可阅读文件夹下的INSTALL-BINARY进行安装</p>
<a id="more"></a>

<p>两个mysql都安装在opt下面</p>
<p>3306安装命令如下</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="built_in">shell</span>&gt; groupadd mysql

<span class="built_in">shell</span>&gt; useradd -r -g mysql mysql

<span class="built_in">shell</span>&gt; cd /opt

<span class="built_in">shell</span>&gt; tar zxvf mysql-<span class="number">5.6</span><span class="number">.20</span>-linux-glibc2<span class="number">.5</span>-x86_64.tar.gz

<span class="built_in">shell</span>&gt; mv mysql-<span class="number">5.6</span><span class="number">.20</span>-linux-glibc2<span class="number">.5</span>-x86_64 mysql3306

<span class="built_in">shell</span>&gt; cd mysql3306

<span class="built_in">shell</span>&gt; mkdir <span class="built_in">log</span>

<span class="built_in">shell</span>&gt; mkdir tmp

<span class="built_in">shell</span>&gt; chown -R mysql .

<span class="built_in">shell</span>&gt; chgrp -R mysql .

<span class="built_in">shell</span>&gt; scripts/mysql_install_db <span class="comment">--user=mysql</span>

<span class="built_in">shell</span>&gt; chown -R root .

<span class="built_in">shell</span>&gt; chown -R mysql data

<span class="built_in">shell</span>&gt; cp support-<span class="built_in">files</span>/my-default.cnf my.cnf

<span class="built_in">shell</span>&gt; cp support-<span class="built_in">files</span>/mysql.server /etc/init.d/mysqld3306
</pre></td></tr></table></figure><br>修改my.cnf,内容如下<br><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="code"><pre><span class="preprocessor"># For advice on how to change settings please see</span>
<span class="preprocessor"># http://dev.mysql.com/doc/refman/5.6/en/server-configuration-defaults.html</span>
<span class="preprocessor"># *** DO NOT EDIT THIS FILE. It's a template which will be copied to the</span>
<span class="preprocessor"># *** default location during install, and will be replaced if you</span>
<span class="preprocessor"># *** upgrade to a newer version of MySQL.</span>

[mysqld]

<span class="preprocessor"># Remove leading # and set to the amount of RAM for the most important data</span>
<span class="preprocessor"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span>
<span class="preprocessor"># innodb_buffer_pool_size = 128M</span>

<span class="preprocessor"># Remove leading # to turn on a very important data integrity option: logging</span>
<span class="preprocessor"># changes to the binary log between backups.</span>
<span class="preprocessor"># log_bin</span>

<span class="preprocessor"># These are commonly set, remove the # and set as required.</span>
 basedir = /opt/mysql3306 
 datadir = /opt/mysql3306/data 
 port = <span class="number">3306</span> 
<span class="preprocessor"># server_id = </span>
 socket = /tmp/mysql3306.sock
 pid-file=/opt/mysql3306/tmp/mysql.pid

<span class="preprocessor"># Remove leading # to set options mainly useful for reporting servers.</span>
<span class="preprocessor"># The server defaults are faster for transactions and fast SELECTs.</span>
<span class="preprocessor"># Adjust sizes as needed, experiment to find the optimal values.</span>
<span class="preprocessor"># join_buffer_size = 128M</span>
<span class="preprocessor"># sort_buffer_size = 2M</span>
<span class="preprocessor"># read_rnd_buffer_size = 2M </span>

sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 

<span class="preprocessor">#log</span>
log-error=/opt/mysql3306/log/error.log
general_log=ON
general_log_file=/opt/mysql3306/log/mysql.log
long_query_time=<span class="number">2</span>
<span class="preprocessor">#log-show-queries=/opt/mysql3306/log/showquery.log</span>
log-bin=/opt/mysql3306/log/bin.log
expire_logs_days=<span class="number">15</span>
sync_binlog=<span class="number">1</span>
<span class="preprocessor">#max_binlog_cache_size = 4294967295</span>
local-infile=<span class="number">0</span>
[mysqld_safe]
log-error=/opt/mysql3306/mysqld3306.log
pid-file=/opt/mysql3306/mysqld.pid
</pre></td></tr></table></figure><br>修改/etc/init.d/mysqld3306<br>主要修改如下<br><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>basedir=/opt/mysql3306
datadir=/opt/mysql3306/data
conf=/opt/mysql3306/my.cnf

<span class="keyword">...</span>

$bindir/mysqld_safe --defaults-file=$conf --datadir=<span class="string">"$datadir"</span> --pid-file=<span class="string">"$mysqld_pid_file_path"</span> $other_args &gt;/dev/null <span class="number">2</span>&gt;&<span class="number">1</span> &
      wait_for_pid created <span class="string">"$!"</span> <span class="string">"$mysqld_pid_file_path"</span>; return_value=$?
</pre></td></tr></table></figure>

<p>3307安装步骤如下</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="built_in">shell</span>&gt; tar zxvf mysql-<span class="number">5.6</span><span class="number">.20</span>-linux-glibc2<span class="number">.5</span>-x86_64.tar.gz

<span class="built_in">shell</span>&gt; mv mysql-<span class="number">5.6</span><span class="number">.20</span>-linux-glibc2<span class="number">.5</span>-x86_64 mysql3307

<span class="built_in">shell</span>&gt; cd mysql3307

<span class="built_in">shell</span>&gt; mkdir <span class="built_in">log</span>

<span class="built_in">shell</span>&gt; mkdir tmp

<span class="built_in">shell</span>&gt; chown -R mysql .

<span class="built_in">shell</span>&gt; chgrp -R mysql .

<span class="built_in">shell</span>&gt; scripts/mysql_install_db <span class="comment">--basedir=/opt/mysql2012 --datadur=/opt/mysql2012 --user=mysql</span>

<span class="built_in">shell</span>&gt; chown -R root .

<span class="built_in">shell</span>&gt; chown -R mysql data

<span class="built_in">shell</span>&gt; cp support-<span class="built_in">files</span>/my-default.cnf my.cnf

<span class="built_in">shell</span>&gt; cp support-<span class="built_in">files</span>/mysql.server /etc/init.d/mysqld3307
</pre></td></tr></table></figure><br>修改my.cnf和/etc/init.d/mysqld3307,修改方式与3306的一样,只是将其中的3306改成3307即可。<br><br>最后，启动mysql<br><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="built_in">shell</span>&gt; service mysqld3306 start
<span class="built_in">shell</span>&gt; service mysqld3307 start
看见SUCCESS就成功了
</pre></td></tr></table></figure>

<p>开机自启动</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="built_in">shell</span>&gt; chkconfig <span class="comment">--add mysqld3306</span>
<span class="built_in">shell</span>&gt; chkconfig <span class="comment">--add mysqld3307</span>
</pre></td></tr></table></figure>
]]></content>
    <summary type="html"><![CDATA[<p>安装的mysql占用端口分别为3306和3307</p>
<p>下载mysql-5.6.20-linux-glibc2.5-x86_64.tar.gz，这个是编译完的二进制包</p>
<p>可阅读文件夹下的INSTALL-BINARY进行安装</p>
]]></summary>
    
      <category term="centos" scheme="/tags/centos/"/>
    
      <category term="mysql" scheme="/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows下安装Redmine]]></title>
    <link href="/2014/09/09/2014-09-09-windows-install-redmine/"/>
    <id>/2014/09/09/2014-09-09-windows-install-redmine/</id>
    <published>2014-09-09T06:39:16.000Z</published>
    <updated>2014-11-15T05:36:27.000Z</updated>
    <content type="html"><![CDATA[<h3 id="准备工作">准备工作</h3>
<p>Redmine官网:<a href="http://www.redmine.org/" target="_blank" rel="external">http://www.redmine.org/</a><br>Ruby官网:<a href="http://rubyforge.org/" target="_blank" rel="external">http://rubyforge.org/</a></p>
<ol>
<li>下载railsinstaller-2.2.3.exe<br> 这是Ruby环境的一键安装包，安装上它就可以安装上全部的Ruby环境。<br> 官网:<a href="http://railsinstaller.org/en" target="_blank" rel="external">http://railsinstaller.org/en</a><br> 此安装包包含如下内容：<br> Ruby 1.9.3<br>Rails 3.2<br>Bundler<br>Git<br>Sqlite<br>TinyTDS<br>SQL Server Support<br>DevKit</li>
</ol>
<a id="more"></a>

<ol>
<li><p>下载ImageMagick，这个是图型生成工具，redmine用于生成pdf等内容，也可以不安装。安装说明在这里<br>我下载的是ImageMagick-6.8.4-0-Q16-x86-dll.exe<br>下载地址:<a href="http://download.csdn.net/detail/lqt0307/5184966" target="_blank" rel="external">http://download.csdn.net/detail/lqt0307/5184966</a><br>ps:我只找到了这个下载地址，需要1分，没有分的可以找我要。</p>
</li>
<li><p>redmine<br>这个就不用说了，上官网下就行，我用的版本是2.5.2。</p>
</li>
<li><p>mysql<br>redmine使用的数据库是mysql，所以需要安装mysql。</p>
</li>
</ol>
<h3 id="安装">安装</h3>
<ol>
<li><p>安装railsinstaller<br> 如果不选择安装目录什么的，直接下一步就可以了。</p>
</li>
<li><p>解压redmine-2.5.2.zip</p>
</li>
<li><p>安装mysql<br> 这个就不多说了。</p>
</li>
<li><p>安装mysql2插件<br> 进入Railsinstaller安装目录下的DevKit，运行DevKit目录下的msys.bat<br> 输入:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>gem install mysql2 <span class="attribute">-v</span><span class="subst">=</span><span class="number">0.3</span><span class="number">.16</span> <span class="subst">--</span> <span class="subst">--</span><span class="keyword">with</span><span class="attribute">-mysql</span><span class="attribute">-dir</span><span class="subst">=</span><span class="string">"mysql安装目录"</span>
</pre></td></tr></table></figure><br>命令中的”mysql安装目录”要替换掉，要不要引号都可以</p>
</li>
<li><p>安装rmagick<br> window下安装rmagick，需要手动安装，不能通过：gem install rmagick 进行安装。<br> 首先需要安装ImageMagick。安装方式可以参考<a href="http://www.redmine.org/projects/redmine/wiki/HowTo_install_rmagick_gem_on_Windows" target="_blank" rel="external">http://www.redmine.org/projects/redmine/wiki/HowTo_install_rmagick_gem_on_Windows</a>，上面讲得很详细。<br> 主要也是下一步、下一步就可以了，需要注意一下的是安装目录中最好不要有空格，我在这个地方被坑了好几次。</p>
<p> 安装完ImageMagick之后，就可以安装rmagick了。进入Railsinstaller安装目录下的DevKit，运行DevKit目录下的msys.bat。<br> 输入:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>gem install <span class="subst">--</span> <span class="subst">--</span><span class="keyword">with</span><span class="attribute">-opt</span><span class="attribute">-lib</span><span class="subst">=</span><span class="string">"ImageMagick安装目录/lib"</span>  <span class="subst">--</span><span class="keyword">with</span><span class="attribute">-opt</span><span class="attribute">-include</span><span class="subst">=</span><span class="string">"
ImageMagick安装目录/include"</span>
</pre></td></tr></table></figure><br>命令中的”ImageMagick安装目录”要替换掉，要不要引号都可以。</p>
</li>
<li><p>数据库准备<br> 6.1. 把libmysql.dll复制到“RailsInstaller安装目录\Ruby1.9.3\bin”下面。<br> 6.2. 创建数据库</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> db_redmine <span class="keyword">CHARACTER</span> <span class="keyword">SET</span> utf8;</span>
</pre></td></tr></table></figure>

<p> 6.3. 修改redmine连接数据库文件<br> redmine目录下的config/database.yml.example 改为config/database.yml<br> 第6行开始</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="label">production:</span>
<span class="label">adapter:</span> mysql2
<span class="label">database:</span> redmine
<span class="label">host:</span> localhost
<span class="label">username:</span> root
<span class="label">password:</span> my_password
</pre></td></tr></table></figure>
</li>
<li><p>目录下执行:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>bundle <span class="keyword">install</span>
</pre></td></tr></table></figure>
</li>
<li><p>初始化Redmine数据库环境</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>bundle <span class="keyword">exec</span> rake db:migrate RAILS_ENV=production
</pre></td></tr></table></figure>
</li>
<li><p>生成session存储密钥</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>bundle <span class="keyword">exec</span> rake generate_secret_token
</pre></td></tr></table></figure>
</li>
<li><p>启动Redmine</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>ruby script/rails server webrick <span class="operator">-e</span> production
</pre></td></tr></table></figure>

</li>
</ol>
<h3 id="将Redmine安装为Windows服务，开机自动运行">将Redmine安装为Windows服务，开机自动运行</h3>
<p>每次都用命令去启动Redmine还是很麻烦的，把Redmine安装成windows服务，让它能够开机自启动，还是很方便的。<br>Ruby提供一个安装Ruby程序为服务的包：mongrel_service。安装其实很简单，只要命令行下运行gem：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>gem <span class="keyword">install</span> mongrel_service
</pre></td></tr></table></figure><br>过程中安装一些必须的其他包。<br>然后将RedMine使用mongrel_service安装成Windows服务：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>mongrel_rails service<span class="tag">::install</span> <span class="attribute">-N</span> Redmine <span class="attribute">-c</span> D:<span class="subst">\</span>WebRoot <span class="attribute">-p</span> <span class="number">3000</span> <span class="attribute">-e</span> production
</pre></td></tr></table></figure><br>这里，我指定服务名为RedMine，我的Redmine在D:\WebRoot，你的要修改，注意指向Redmine的根目录。监听3000端口。<br>然后修改启动方式为自动启动，并添加MySQL服务为其依赖服务（如果你的MySQL服务器不是本机就不用麻烦了）：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="attribute">sc config Redmine start</span>=<span class="string"> auto depend= MySQL</span>
</pre></td></tr></table></figure><br>注意，执行sc config系列指令，服务必须是未启动的才行，否则会出错。<br>将来如果想去掉这个服务，只要执行：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>mongrel_rails service<span class="tag">::remove</span> <span class="attribute">-N</span> Redmine
</pre></td></tr></table></figure><br>也可以使用：<code>sc delete Redmine</code> 删除服务。<br><br>以上方式只适用于xp及xp以上系统，如果你的系统是server 2003，需要用下面这种方式：<a href="http://www.redmine.org/boards/1/topics/4123" target="_blank" rel="external">http://www.redmine.org/boards/1/topics/4123</a>。<br>上面说得很详细了，我就不在累述。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="attribute">rake redmine:plugins:migrate RAILS_ENV</span>=<span class="string">production</span>
</pre></td></tr></table></figure>
]]></content>
    <summary type="html"><![CDATA[<h3 id="准备工作">准备工作</h3>
<p>Redmine官网:<a href="http://www.redmine.org/" target="_blank" rel="external">http://www.redmine.org/</a><br>Ruby官网:<a href="http://rubyforge.org/" target="_blank" rel="external">http://rubyforge.org/</a></p>
<ol>
<li>下载railsinstaller-2.2.3.exe<br> 这是Ruby环境的一键安装包，安装上它就可以安装上全部的Ruby环境。<br> 官网:<a href="http://railsinstaller.org/en" target="_blank" rel="external">http://railsinstaller.org/en</a><br> 此安装包包含如下内容：<br> Ruby 1.9.3<br>Rails 3.2<br>Bundler<br>Git<br>Sqlite<br>TinyTDS<br>SQL Server Support<br>DevKit</li>
</ol>
]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS下安装Redmine]]></title>
    <link href="/2014/09/09/2014-09-09-centos-install-redmine/"/>
    <id>/2014/09/09/2014-09-09-centos-install-redmine/</id>
    <published>2014-09-09T06:37:15.000Z</published>
    <updated>2014-11-15T05:36:37.000Z</updated>
    <content type="html"><![CDATA[<p>Redmine的安装主要分为两部分：</p>
<ol>
<li>Ruby+Rails的安装</li>
<li>Redmine的安装<br>先说一下系统环境，我安装的系统是CentOS 5，选择的Redmine版本是2.5.2，Ruby的版本是1.9.3，Rails的版本是3.2.19。<br>下面从以上两部分进行说明。</li>
</ol>
<h3 id="Ruby+Rails的安装">Ruby+Rails的安装</h3>
<p>Ruby的安装有3中方式：</p>
<ol>
<li>直接<code>yum install ruby</code></li>
<li>源码编译安装</li>
<li>采用RVM安装<br>以上3种方式我都尝试了，最后采用了RVM安装这种方式，这种方式也是最简单的。</li>
</ol>
<a id="more"></a>

<ol>
<li><p>下载RVM并且安装</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>curl -L <span class="keyword">https</span>://<span class="built_in">get</span>.rvm.io | bash -s stable
</pre></td></tr></table></figure>
</li>
<li><p>安装一些依赖库，编译安装其它软件或者库的时候会用到</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>yum install zlib zlib<span class="attribute">-devel</span> sqlite<span class="attribute">-devel</span>
yum install <span class="attribute">-y</span> gcc<span class="attribute">-c</span><span class="subst">++</span> patch readline readline<span class="attribute">-devel</span> zlib zlib<span class="attribute">-devel</span> libyaml<span class="attribute">-devel</span> libffi<span class="attribute">-devel</span> openssl<span class="attribute">-devel</span> make bzip2 autoconf automake libtool bison iconv<span class="attribute">-devel</span>
</pre></td></tr></table></figure>
</li>
<li><p>安装openssl，安装ruby的时候会使用到</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>rvm pkg <span class="keyword">install</span> openssl
</pre></td></tr></table></figure>
</li>
<li><p>指定openssl的位置来安装ruby</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>rvm install <span class="number">1.9</span><span class="number">.3</span> <span class="subst">--</span><span class="keyword">with</span><span class="attribute">-openssl</span><span class="attribute">-dir</span><span class="subst">=</span>/usr/<span class="built_in">local</span>/rvm/usr
</pre></td></tr></table></figure>
</li>
<li><p>指定使用Ruby版本</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>rvm <span class="keyword">use</span> <span class="number">1.9</span>.<span class="number">2</span>
</pre></td></tr></table></figure>
</li>
<li><p>安装Rails</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>gem <span class="keyword">install</span> rails
</pre></td></tr></table></figure>

</li>
</ol>
<p>经过以上步骤，Ruby和Rails就安装完毕了。<br>安装完Ruby之后，建议更改一下gem的镜像地址，原因你懂的。可以改到淘宝的gem镜像，参考一下网址：<a href="http://ruby.taobao.org" target="_blank" rel="external">http://ruby.taobao.org/</a>。上面有更改gem镜像的详细方法。</p>
<h3 id="Redmine的安装">Redmine的安装</h3>
<p>最推荐的做法是参考官方wiki（<a href="http://www.redmine.org/projects/redmine/wiki/RedmineInstall）" target="_blank" rel="external">http://www.redmine.org/projects/redmine/wiki/RedmineInstall）</a></p>
<ol>
<li><p>准备Redmine需要用到的数据库环境<br> 1.1. 修改Redmine数据库配置文件<br> 进入Redmine目录</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">cp</span> config/database<span class="preprocessor">.yml</span><span class="preprocessor">.example</span> config/database<span class="preprocessor">.yml</span>  
vi database<span class="preprocessor">.yml</span>
</pre></td></tr></table></figure><br>按照下面的内容进行修改<br><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="attribute">production</span>: <span class="string"> </span>
<span class="attribute">adapter</span>: <span class="string">mysql2  </span>
<span class="attribute">database</span>: <span class="string">db_redmine  </span>
<span class="attribute">host</span>: <span class="string">localhost  </span>
<span class="attribute">username</span>: <span class="string">root  </span>
<span class="attribute">password</span>: <span class="string">&lt;你的mysql密码&gt;  </span>
<span class="attribute">ps</span>: <span class="string">其中的一些值需要根据实际情况</span>
</pre></td></tr></table></figure>

<p> 1.2. 进入Mysql创建数据库</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> redmine <span class="keyword">character</span> <span class="keyword">set</span> utf8;</span>
</pre></td></tr></table></figure>
</li>
<li><p>初始化Redmine数据库环境</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="attribute">rake db:migrate RAILS_ENV</span>=<span class="string">production</span>
</pre></td></tr></table></figure><br>执行此命令的时候会出现以下错误：<br><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>Could <span class="operator">not</span> find gem <span class="string">'mocha (~&gt; 1.0.0) ruby'</span> <span class="operator">in</span> <span class="operator">the</span> gems available <span class="command"><span class="keyword">on</span> <span class="title">this</span> <span class="title">machine</span>.</span>
Run `bundle install` <span class="built_in">to</span> install missing gems.
</pre></td></tr></table></figure><br>报这个错误的原因是因为缺少<code>mocha</code>这个gem，类似的还有很多gem都缺失。解决方法就是根据提示一个一个安装（类似于<code>gem install mocha -v=1.0.0</code>这样的命令），另一种解决办法是使用<code>bundle install</code>自动安装所缺少的gem，推荐使用这种方式，这种方式会自动帮你下载所依赖的gem，并且还能解决它们之间的版本冲突问题。<br>通过<code>bundle install</code>命令基本可以安装上所有依赖的gem，除了一个，<code>rmagick</code>，这个gem还需要依赖<code>ImageMagick</code>，他是用于处理一些图片转换之类的工作的。由于<code>rmagick</code>需要依赖<code>ImageMagick</code>，所以使用<code>bundle install</code>会安装失败，需要现在系统中安装<code>ImageMagick</code>。<br>解决方法如下：<br> 2.1. 如果你的CentOS版本比较新，可直接采用yum安装<br> <figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>	yum <span class="keyword">install</span> ImageMagick-devel
</pre></td></tr></table></figure>

<p> 2.2. 源码编译安装<br> 去官网下载源码(<a href="http://www.imagemagick.org/script/install-source.php#unix" target="_blank" rel="external">http://www.imagemagick.org/script/install-source.php#unix</a>)<br> 上面有安装教程，建议安装上面的步骤进行安装。<br> 下面列出我安装时执行的命令：</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>	tar xvzf ImageMagick<span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>
    cd ImageMagick-<span class="number">6.8</span><span class="number">.9</span>
    ./configure
    make
    make install
</pre></td></tr></table></figure>

<p> 经过上面的步骤将gem都安装完之后，还需要再次执行<code>rake db:migrate RAILS_ENV=production</code>，这一步的主要作用是在数据库中生成Redmine需要的数据库表。</p>
</li>
<li><p>生成Redmine的Session存储</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>rake generate_secret_token
</pre></td></tr></table></figure>
</li>
<li><p>启动Redmine<br><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>ruby script/rails server webrick <span class="operator">-e</span> production
</pre></td></tr></table></figure><br>这条命令不是后台运行，建议使用如下命令，让redmie在后台运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>ruby script/rails server <span class="attribute">-e</span> production <span class="attribute">-d</span> <span class="subst">&gt;</span> /dev/<span class="built_in">null</span> <span class="number">2</span><span class="subst">&gt;&</span><span class="number">1</span> <span class="subst">&</span>
</pre></td></tr></table></figure><br>可将上述命令加入/etc/local中，使得Redmine可以在系统启动时就启动。</p>
</li>
</ol>
<p>在使用过程中可能会遇到如下错误：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>ActionView::Template::Error (incompatible <span class="typename">character</span> encodings: UTF-<span class="number">8</span> <span class="keyword">and</span> ASCII-<span class="number">8</span><span class="typename">BIT</span>)
</pre></td></tr></table></figure><br>解决方法如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="tag">rake</span> <span class="tag">assets</span><span class="pseudo">:precompile</span>
然后重启<span class="tag">rails</span> <span class="tag">server</span>。
</pre></td></tr></table></figure>

<h3 id="插件安装">插件安装</h3>
<p>Redmine还可以安装一些插件，来帮助我们进行项目管理。<br>我们现在安装的插件有crumpm、code review、scrum、Aginle。<br>code review下载地址:<a href="http://www.redmine.org/plugins/codereview" target="_blank" rel="external">http://www.redmine.org/plugins/codereview</a><br>scrum下载地址:<a href="https://redmine.ociotec.com/projects/redmine-plugin-scrum" target="_blank" rel="external">https://redmine.ociotec.com/projects/redmine-plugin-scrum</a><br>Aginle下载地址:<a href="http://www.redmine.org/plugins/redmine_agile" target="_blank" rel="external">http://www.redmine.org/plugins/redmine_agile</a></p>
<p>插件安装步骤:</p>
<ol>
<li>下载插件，解压到Redmine安装目录下的plugins文件夹下</li>
<li>在Redmine安装目录下执行:<figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="attribute">rake redmine:plugins:migrate RAILS_ENV</span>=<span class="string">production</span>
</pre></td></tr></table></figure></li>
<li>重启Redmine</li>
</ol>
<p>安装过程的参考资料如下：</p>
<ol>
<li><a href="http://lxiaodao.iteye.com/blog/1579992" target="_blank" rel="external">http://lxiaodao.iteye.com/blog/1579992</a></li>
<li><a href="http://note.youdao.com/share/?id=610d4aea90c5d7281b61dfcb1cd41906&amp;type=note" target="_blank" rel="external">http://note.youdao.com/share/?id=610d4aea90c5d7281b61dfcb1cd41906&amp;type=note</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_8254427901016z1l.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_8254427901016z1l.html</a></li>
</ol>
]]></content>
    <summary type="html"><![CDATA[<p>Redmine的安装主要分为两部分：</p>
<ol>
<li>Ruby+Rails的安装</li>
<li>Redmine的安装<br>先说一下系统环境，我安装的系统是CentOS 5，选择的Redmine版本是2.5.2，Ruby的版本是1.9.3，Rails的版本是3.2.19。<br>下面从以上两部分进行说明。</li>
</ol>
<h3 id="Ruby+Rails的安装">Ruby+Rails的安装</h3>
<p>Ruby的安装有3中方式：</p>
<ol>
<li>直接<code>yum install ruby</code></li>
<li>源码编译安装</li>
<li>采用RVM安装<br>以上3种方式我都尝试了，最后采用了RVM安装这种方式，这种方式也是最简单的。</li>
</ol>
]]></summary>
    
      <category term="linux" scheme="/tags/linux/"/>
    
      <category term="redmine" scheme="/tags/redmine/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[code-standards]]></title>
    <link href="/2014/07/19/code-standards/"/>
    <id>/2014/07/19/code-standards/</id>
    <published>2014-07-19T14:42:52.000Z</published>
    <updated>2014-11-14T15:35:47.000Z</updated>
    <content type="html"><![CDATA[<h1 id="后端">后端</h1>
<hr>
<h2 id="工程结构">工程结构</h2>
<p>分为<code>service</code>和<code>web</code></p>
<h2 id="注释">注释</h2>
<ol>
<li><p>类头要写明该类的职责是什么。<br>for example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="javadoc">/**
 * 职责
 *<span class="javadoctag"> @Description</span>
 *
 *<span class="javadoctag"> @author</span> zhangteng
 *<span class="javadoctag"> @email</span> zhangt@pandawork.net
 *<span class="javadoctag"> @time</span>: 2014/7/9 14:25
 */</span>
</pre></td></tr></table></figure></p>
<a id="more"></a>
</li>
<li><p>方法要写明该方法的功能是什么。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="javadoc">/**
 * 获取分页列表
 *
 *<span class="javadoctag"> @param</span> curPage
 *<span class="javadoctag"> @param</span> code
 *<span class="javadoctag"> @param</span> name
 *<span class="javadoctag"> @param</span> startTime
 *<span class="javadoctag"> @param</span> endTime
 *<span class="javadoctag"> @return</span>
 */</span>
</pre></td></tr></table></figure></li>
<li>方法里面要有适当的注释。不能写了一个方法100行，一个注释都没有。</li>
<li>数据库表要有一个总的声明，每个字段有相关说明。</li>
<li>实体或者业务修改，也要修改相关数据表中表对应的字段说明。保持一致。</li>
</ol>
<h2 id="后端规范">后端规范</h2>
<h3 id="类名称">类名称</h3>
<ol>
<li>以大写字母开头。</li>
<li>以驼峰方式命名。</li>
</ol>
<h3 id="属性名、方法名">属性名、方法名</h3>
<ol>
<li>以小写字母开头。</li>
<li>以驼峰方式命名。</li>
</ol>
<h3 id="常量命名规范">常量命名规范</h3>
<ol>
<li>所有字母大写</li>
<li>单词之间用’_’分隔</li>
</ol>
<h3 id="service,mapper方法名">service,mapper方法名</h3>
<p>方法名，根据不同的功能，按照不同的前缀进行设计。如下表：</p>
<table>
<thead>
<tr>
<th>功能说明</th>
<th>前缀</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算数量</td>
<td>count</td>
</tr>
<tr>
<td>获取列表</td>
<td>list</td>
</tr>
<tr>
<td>查询功能</td>
<td>query</td>
</tr>
<tr>
<td>创建</td>
<td>add</td>
</tr>
<tr>
<td>删除</td>
<td>del</td>
</tr>
<tr>
<td>修改</td>
<td>update</td>
</tr>
</tbody>
</table>
<h3 id="controller命名规范">controller命名规范</h3>
<table>
<thead>
<tr>
<th>功能说明</th>
<th>前缀</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算数量</td>
<td>count</td>
</tr>
<tr>
<td>获取列表</td>
<td>list</td>
</tr>
<tr>
<td>查询功能</td>
<td>query</td>
</tr>
<tr>
<td>创建</td>
<td>add</td>
</tr>
<tr>
<td>删除</td>
<td>del</td>
</tr>
<tr>
<td>修改</td>
<td>update</td>
</tr>
</tbody>
</table>
<p>如果是ajax，则需要在此前加上ajax。例如：<br>要通过ajax按照ID删除一个产品，方法名为ajaxDelProductById</p>
<h3 id="URL规范">URL规范</h3>
<h4 id="URL结构">URL结构</h4>
<p>下面，我们以用户为例。</p>
<ul>
<li>CREATE<br>/user/new        GET              这个Url负责跳转到提交表单的页面，用Get方法<br>/user            POST             负责接收表单提交的数据，用POST方法</li>
<li>DELETE<br>/user/{id}/del   GET              跳转到提交删除请求的页面，用GET方法（可选）<br>/user/{id}       DELETE           负责接收要删除的用户的数据，用DELETE方法</li>
<li>UPDATE<br>/user/{id}/update     GET         跳转到用户修改的页面，用GET方法<br>/user/{id}       PUT              负责接收表单提交的数据，修改用户，用PUT方法</li>
<li>READ<br>/user            GET              跳转到查看用户列表的页面，用GET方法<br>/user/{id}       GET              跳转到查看某个用户的页面，用GET方法</li>
<li>OTHER<br>/user/{id}/lock  PUT                有些时候，为了表示某一动作对用户产生的变化，我们这样命名，比如用户的锁定</li>
<li>分页<br>/user/{curPage} GET              大家可以用这个来进行获取分页列表</li>
</ul>
<h3 id="mapper层SQL语句书写规范">mapper层SQL语句书写规范</h3>
<p>书写SQL语句时，SQL中的关键字全部采用大写，如下所示</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="operator"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`t_quality_check_item`</span></span>
</pre></td></tr></table></figure><br>SELECT、FROM、INSERT INTO、UPDATE、DELETE、AND、OR、LIKE、LIMIT、ORDER等关键字，在mapper中书写SQL语句时均采用大写。<br><br>### 后端开发注意事项<br>1. 职责单一化<br>要确保所写的程序职责单一，例如，有ProductService，和一个DiscountService，两者的区别在于一个是对产品的操作，另外一个是折扣的业务，在ProductService中，出现直接调去DiscountMapper的方法。<br>如上例，一个方法可以，多了，整个工程会出现轮乱局面，正确做法是走discountService进行相关的折扣计算。<br>2. 重复方法<br>此类问题最为严重，禁止在同一个Service中，或在mapper中出现多个名称不一样，但功能一样的方法。<br><br>## 数据库<br>### 数据库表名命名规则<br>1. 表名由前缀和实际名字组成，前缀和实际名字之间使用“<em>”连接。前缀使用“t”，实际名字都使用小写单词，多个单词之间使用“</em>”连接。例如：t<em>student_info<br>2. 如果要进行分表时，表的命名直接在表名的后面加上分表的标志。例如，t_user001,t_user002,t_user003<br>3. 表名的构成有t</em>模块名称<em>自己的表名。<br><br>### 字段命名规则<br>1. 每一个表都将有一个自动id作为主健,逻辑上的主健作为第一组候选主健来定义,如果是数据库自动生成的编码，统一命名为：id;如果是自定义的逻辑上的编码则用缩写 加“id”的方法命名。<br>2. 采用前缀命名。给每个表的列名都采用统一的前缀，后面的单词或则缩写都以大写字母开头<br><br>### 数据表的存储引擎和索引约定规则<br>1. 现在所有表的存储引擎都要选择InnoDB，如果需要设为其他存储引擎的时，要特别说明。<br>2. 在建立查询时候，务必要建立好数据库的索引，在确保查询语句使用正确高效可靠以后，养成马上建立对于索引的习惯。<br>3. 索引名称格式如下：<br>    * index\</em>索引类型_表名_按照索引顺序编写字段名，以_为分隔符。<br>    <em> index_t_books_isbn（普通索引）
    </em> index_unique_t_books_isbn(构建唯一索引)<br><br>索引的类型一般有三种类型，分别是普通索引（数据库中的index）, 唯一索引（数据库中的index unique),全文索引，这个基本上我们不会使用。<br><br><figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>url:{
    index:{
        login:{
            check: <span class="string">'${website}index/login/check'</span>
        }
    }
}
</pre></td></tr></table></figure>]]></content>
    <summary type="html"><![CDATA[<h1 id="后端">后端</h1>
<hr>
<h2 id="工程结构">工程结构</h2>
<p>分为<code>service</code>和<code>web</code></p>
<h2 id="注释">注释</h2>
<ol>
<li><p>类头要写明该类的职责是什么。<br>for example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="javadoc">/**
 * 职责
 *<span class="javadoctag"> @Description</span>
 *
 *<span class="javadoctag"> @author</span> zhangteng
 *<span class="javadoctag"> @email</span> zhangt@pandawork.net
 *<span class="javadoctag"> @time</span>: 2014/7/9 14:25
 */</span>
</pre></td></tr></table></figure></p>
]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[grub2修复windows引导]]></title>
    <link href="/2014/07/12/grub2-repair-windows/"/>
    <id>/2014/07/12/grub2-repair-windows/</id>
    <published>2014-07-12T04:39:43.000Z</published>
    <updated>2014-11-14T15:35:55.000Z</updated>
    <content type="html"><![CDATA[<p>可参考网址<a href="http://blog.csdn.net/hengyunabc/article/details/6071683" target="_blank" rel="external">http://blog.csdn.net/hengyunabc/article/details/6071683</a></p>
<p>今天装了个centos 7，进去之后发现没有windows引导了，centos 7开始用grub 2引导了。<br>首先可以试试:</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ gurb2<span class="attribute">-mkconfig</span> <span class="attribute">-o</span> /boot/grub/grub<span class="built_in">.</span>cfg
</pre></td></tr></table></figure><br>它非常智能，能自动检测电脑上安装的操作系统，将它们加入到引导中去。<br>不过，有时候它也不好使，就像我今天这样。</p>
<a id="more"></a>

<p>可以采用第二种方式，手动修改/boot/grub/grub.cfg</p>
<p>首先查看分区的UUID</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$ </span>blkid
</pre></td></tr></table></figure><br>找到windows所在分区的UUID。一定要记住UUID，不要记住分区号，因为分区号有可能改变，但是UUID一定不会变。<br>然后修改grub.cfg</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$ </span>vim /boot/grub/grub.cfg
</pre></td></tr></table></figure><br>在该文件中加入如下内容:</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>menuentry <span class="string">"windows 8"</span> {
    insmod chain
    insmod ntfs
    search <span class="subst">--</span>fs<span class="attribute">-uuid</span> <span class="subst">--</span><span class="built_in">set</span> <span class="number">10</span>ac99d8ac99b8a4
    chainloader <span class="subst">+</span><span class="number">1</span>
}
</pre></td></tr></table></figure><br>其中的“10ac99d8ac99b8a4”要替换为上一步记住的UUID。</p>
<p>最后，重启电脑就可以看到windows 8的引导了，选择就可以进入系统了。</p>
]]></content>
    <summary type="html"><![CDATA[<p>可参考网址<a href="http://blog.csdn.net/hengyunabc/article/details/6071683" target="_blank" rel="external">http://blog.csdn.net/hengyunabc/article/details/6071683</a></p>
<p>今天装了个centos 7，进去之后发现没有windows引导了，centos 7开始用grub 2引导了。<br>首先可以试试:</p>
<p><figure class="highlight sh"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ gurb2<span class="attribute">-mkconfig</span> <span class="attribute">-o</span> /boot/grub/grub<span class="built_in">.</span>cfg
</pre></td></tr></table></figure><br>它非常智能，能自动检测电脑上安装的操作系统，将它们加入到引导中去。<br>不过，有时候它也不好使，就像我今天这样。</p>
]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown语法简介]]></title>
    <link href="/2014/07/07/markdown-grammar/"/>
    <id>/2014/07/07/markdown-grammar/</id>
    <published>2014-07-07T12:41:20.000Z</published>
    <updated>2014-11-14T15:36:17.000Z</updated>
    <content type="html"><![CDATA[<p>本文摘抄自<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">http://wowubuntu.com/markdown/</a>，旨在联系一下markdown的语法，同时也向大家介绍一下markdown的语法，方便大家和自己查阅。</p>
<hr>
<h1 id="Markdown_语法说明（简体中文版）">Markdown 语法说明（简体中文版）</h1>
<ul>
<li><a href="#overview">概述</a><ul>
<li><a href="#philosophy">宗旨</a></li>
<li><a href="#html">兼容 HTML</a></li>
<li><a href="#autoescape">特殊字符自动转换</a></li>
</ul>
</li>
<li><a href="#block">区块元素</a><ul>
<li><a href="#p">段落和换行</a></li>
<li><a href="#header">标题</a></li>
<li><a href="#blockquote">区块引用</a></li>
<li><a href="#list">列表</a></li>
<li><a href="#precode">代码区块</a></li>
<li><a href="#hr">分割线</a></li>
</ul>
</li>
<li><a href="#span">区段元素</a><ul>
<li><a href="#link">链接</a></li>
<li><a href="#em">强调</a></li>
<li><a href="#code">代码</a></li>
<li><a href="#img">图片</a></li>
</ul>
</li>
<li><a href="#misc">其它</a><ul>
<li><a href="#backslash">反斜杠</a></li>
<li><a href="#autolink">自动连接</a></li>
</ul>
</li>
<li><a href="#editor">Markdown 免费编辑器</a></li>
</ul>
<a id="more"></a>

<hr>
<h2 id="overview">概述</h2>

<h3 id="philosophy">宗旨</h3>

<p>Markdown的目标是实现「易读易写」。</p>
<p>可读性，无论如何，都是最重要的。一份使用Markdown格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown语法受到一些既有text-to-HTML格式的影响，包括<a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="external">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="external">atx</a>、<a href="http://textism.com/tools/textile/" target="_blank" rel="external">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="external">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="external">Grutatext</a>和<a href="http://ettext.taint.org/doc/" target="_blank" rel="external">EtText</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p>
<p>总之，Markdown的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown的列表看起来，嗯，就是列表。Markdown的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>
<h3 id="html">兼容 HTML</h3>

<p>Markdown语法的目标是：成为一种适用于网络的<em>书写</em>语言。</p>
<p>Markdown不是想要取代HTML，甚至也没有要和它相近，他的语法种类很少，只对应HTML标记的一小部分。Markdown的构想<em>不是</em>要使得HTML文档更容易书写。在我看来，HTML已经很容易书写了。Markdown的理念是，能让文档更容易读、写和随意改。HTML是一种<em>发布</em>的格式，Markdown是一种<em>书写</em>的格式。就这样，Markdown的格式语法只涵盖纯文本可以涵盖的范围。</p>
<p>不在Markdown涵盖范围之内的标签，都可以直接在文档里面用HTMl撰写。不需要额外标注这是HTML或是Markdown；只要直接加标签就可以了。</p>
<p>要制约的只有一些HTML区块元素—比如<code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code>等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown的生成器有足够只能，不会在HTML区块标签外加上不必要的<code>&lt;p&gt;</code>标签。</p>
<p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p>
<pre><code>这是一个普通段落。

<span class="tag">&lt;<span class="title">table</span>&gt;</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;<span class="title">td</span>&gt;</span>Foo<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span>

这是另一个普通段落。
</code></pre><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p>
<p>HTML的区段（行内）标签如<code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code>可以在Markdown的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用Markdown格式，而直接此阿勇HTML标签来格式化。举例说明：如果比较喜欢HTML的<code>&lt;a&gt;</code>或<code>&lt;img&gt;</code>标签，可以直接使用这些标签，而不用Markdown提供的链接或是图像标签语法。</p>
<p>和处在HTML区块标签件不同，Markdown语法在HTML区段标签间是有效的。</p>
]]></content>
    <summary type="html"><![CDATA[<p>本文摘抄自<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">http://wowubuntu.com/markdown/</a>，旨在联系一下markdown的语法，同时也向大家介绍一下markdown的语法，方便大家和自己查阅。</p>
<hr>
<h1 id="Markdown_语法说明（简体中文版）">Markdown 语法说明（简体中文版）</h1>
<ul>
<li><a href="#overview">概述</a><ul>
<li><a href="#philosophy">宗旨</a></li>
<li><a href="#html">兼容 HTML</a></li>
<li><a href="#autoescape">特殊字符自动转换</a></li>
</ul>
</li>
<li><a href="#block">区块元素</a><ul>
<li><a href="#p">段落和换行</a></li>
<li><a href="#header">标题</a></li>
<li><a href="#blockquote">区块引用</a></li>
<li><a href="#list">列表</a></li>
<li><a href="#precode">代码区块</a></li>
<li><a href="#hr">分割线</a></li>
</ul>
</li>
<li><a href="#span">区段元素</a><ul>
<li><a href="#link">链接</a></li>
<li><a href="#em">强调</a></li>
<li><a href="#code">代码</a></li>
<li><a href="#img">图片</a></li>
</ul>
</li>
<li><a href="#misc">其它</a><ul>
<li><a href="#backslash">反斜杠</a></li>
<li><a href="#autolink">自动连接</a></li>
</ul>
</li>
<li><a href="#editor">Markdown 免费编辑器</a></li>
</ul>
]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[新博客的第一篇博文]]></title>
    <link href="/2014/07/06/new-blog-first-post/"/>
    <id>/2014/07/06/new-blog-first-post/</id>
    <published>2014-07-06T12:59:23.000Z</published>
    <updated>2014-07-06T13:08:55.000Z</updated>
    <content type="html"><![CDATA[<p>以前在github上用octopress挂了一个博客，但是用它还得装ruby，感觉比较麻烦（主要还是不懂ruby）。<br>前段时间，看到有人用hexo搭建博客，我也试了试。hexo是基于node，比octopress方便多了，就转了过来。<br>这是他的官网<a href="http://hexo.io/" target="_blank" rel="external">http://hexo.io/</a>，关于具体怎么搭建，我就不多说了，官网写得和详细，直接上官方文档的链接<a href="http://hexo.io/docs/index.html" target="_blank" rel="external">http://hexo.io/docs/index.html</a>。<br>说说我遇到的问题吧，按照官网说的做了，我用<code>hexo deploy</code>，一直deploy上去，也不知道为啥，可能主要还是我对node和git都不熟悉吧。<br>最后我是手动deploy的。具体命令如下：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>$ hexo clean
$ hexo deploy --generate
$ <span class="built_in">cd</span> .deploy
$ git push -u origin master
</pre></td></tr></table></figure><br>命令都是在hexo博客的目录下执行的。<br>另外奉上我使用的主题地址:<a href="http://yangjian.me/pacman/hello/introducing-pacman-theme/" target="_blank" rel="external">http://yangjian.me/pacman/hello/introducing-pacman-theme/</a></p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[jquery使用笔记]]></title>
    <link href="/2013/11/01/2013-11-01-jquery-study/"/>
    <id>/2013/11/01/2013-11-01-jquery-study/</id>
    <published>2013-11-01T02:43:00.000Z</published>
    <updated>2014-11-15T05:39:07.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>ajax请求，注意最后一个值的地方没有逗号<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre>$.ajax({  
    type: <span class="string">"POST"</span>,
    url: <span class="string">"mystructs/hello_jsonTest.action"</span>,
    data: {
        number: $(<span class="string">"#number"</span>).val(),
        userId: $(<span class="string">'#userId'</span>).val() 
    },
    dataType: <span class="string">"text"</span>,  <span class="comment">//ajax返回值设置为text（json格式也可用它返回，可打印出结果，也可设置成json）</span>
    success: <span class="function"><span class="keyword">function</span><span class="params">(json)</span> {</span>
        <span class="keyword">var</span> res = $.parseJSON(json);
        alert(res.result);
    },
    error: <span class="function"><span class="keyword">function</span><span class="params">(json)</span> {</span>
        alert(json);
    }
});
</pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<ol>
<li>jquery改变值<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>$(<span class="string">'#id'</span>).val(<span class="string">'value'</span>);
$(<span class="string">'#id'</span>).html(<span class="string">'value'</span>);
</pre></td></tr></table></figure></li>
<li>jquery获取radio中被选中的那个元素<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="keyword">var</span> val = $(<span class="string">'input:radio[name="ra"]:checked'</span>).val();
<span class="keyword">if</span>(val != <span class="literal">null</span>) {
    alert(val);
} <span class="keyword">else</span> {        
    ...
}
</pre></td></tr></table></figure><br>判读radio是否被选中<br><figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>$(<span class="string">'input:radio[name="ra"]'</span>).each(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="comment">//alert($(this).val());</span>
    <span class="keyword">if</span>($(<span class="keyword">this</span>).attr(<span class="string">"checked"</span>) == <span class="string">"checked"</span>) {
        alert($(<span class="keyword">this</span>).val());
    }
});
</pre></td></tr></table></figure></li>
<li>获取选中的checkbox<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>$(<span class="string">'input[name="chk"]:checked'</span>).each(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
    alert($(<span class="keyword">this</span>).val());
});
</pre></td></tr></table></figure><br>判读checkbox是否被选中<br><figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>$(<span class="string">'input:checkbox[name="chk"]'</span>).each(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">if</span>($(<span class="keyword">this</span>).attr(<span class="string">"checked"</span>) == <span class="string">"checked"</span>) {
        alert($(<span class="keyword">this</span>).val());
    }
});
</pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    <summary type="html"><![CDATA[<ol>
<li>ajax请求，注意最后一个值的地方没有逗号<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre>$.ajax({  
    type: <span class="string">"POST"</span>,
    url: <span class="string">"mystructs/hello_jsonTest.action"</span>,
    data: {
        number: $(<span class="string">"#number"</span>).val(),
        userId: $(<span class="string">'#userId'</span>).val() 
    },
    dataType: <span class="string">"text"</span>,  <span class="comment">//ajax返回值设置为text（json格式也可用它返回，可打印出结果，也可设置成json）</span>
    success: <span class="function"><span class="keyword">function</span><span class="params">(json)</span> {</span>
        <span class="keyword">var</span> res = $.parseJSON(json);
        alert(res.result);
    },
    error: <span class="function"><span class="keyword">function</span><span class="params">(json)</span> {</span>
        alert(json);
    }
});
</pre></td></tr></table></figure>

</li>
</ol>
]]></summary>
    
      <category term="jquery" scheme="/categories/jquery/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[structs2返回json]]></title>
    <link href="/2013/10/30/2013-10-30-struts2-json/"/>
    <id>/2013/10/30/2013-10-30-struts2-json/</id>
    <published>2013-10-30T01:28:00.000Z</published>
    <updated>2014-11-15T05:38:58.000Z</updated>
    <content type="html"><![CDATA[<p>structs2返回本身支持返回json，只需要配置即可，我们也可以自己把json串写入servlet输出流中。</p>
<a id="more"></a>

<p>1.structs2本身对json的支持<br>在action中对需要返回的值进行设置，实体、java自带类型都可以。<br>如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">private</span> User user;
<span class="keyword">private</span> result result;

<span class="comment">/*   setter and getter   */</span>
<span class="keyword">public</span> String <span class="title">json</span>() {
    user.setUserName(<span class="string">"iris"</span>);
    result = <span class="string">"success"</span>;
    <span class="keyword">return</span> SUCCESS;
}
</pre></td></tr></table></figure><br>在配置文件中配置result的type为json</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>&lt;<span class="constant">result</span>-types&gt;
    &lt;<span class="constant">result</span>-type <span class="property">name</span>=<span class="string">"json"</span> <span class="type">class</span>=<span class="string">"org.apache.struts2.json.JSONResult"</span>/&gt;
&lt;/<span class="constant">result</span>-types&gt;

&lt;action <span class="property">name</span>=<span class="string">"hello_*"</span> <span class="type">class</span>=<span class="string">"action.FirstAction"</span> method=<span class="string">"{1}"</span>&gt;
    &lt;<span class="constant">result</span> <span class="property">name</span>=<span class="string">"success"</span> type=<span class="string">"json"</span>&gt;&lt;/<span class="constant">result</span>&gt;
&lt;/action&gt;
</pre></td></tr></table></figure><br>注意result-types那段一定要加上，不加那个的就必须让action所在的package继承<code>json-default</code><br>2.把json数据写入servlet输出流中<br>在action中讲json数据直接写入servlet输出流中，action中的方法返回void<br>如：</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newjsontest</span>() {
    HttpServletResponse response = ServletActionContext.getResponse();
    PrintWriter out = <span class="keyword">null</span>;
    <span class="keyword">try</span> {
        out = response.getWriter();
    User user = <span class="keyword">new</span> User();
    user.setUsername(<span class="string">"iris"</span>);
    user.setPassword(<span class="string">"iris"</span>);
    JSONObject jsonObject = JSONObject.fromObject(user);
    out.print(jsonObject.toString());
    out.flush();
    } <span class="keyword">catch</span> (IOException e) {
    e.printStackTrace();
    } <span class="keyword">finally</span> {
    <span class="keyword">if</span>(out != <span class="keyword">null</span>) {
        <span class="keyword">try</span> {
    	        out.close();
    	    } <span class="keyword">catch</span> (Exception e) {
            e.printStackTrace();
        }
        }
    }
}
</pre></td></tr></table></figure><br>这里用到了<code>net.sf.json.JSONObject</code>这个包，将实体直接转换成json，也可以不用这个包，直接手动拼json串，然后<code>out.write(jsonStr)</code>。</p>
]]></content>
    <summary type="html"><![CDATA[<p>structs2返回本身支持返回json，只需要配置即可，我们也可以自己把json串写入servlet输出流中。</p>
]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[sublime利用snippet生成代码模版]]></title>
    <link href="/2013/10/23/2013-10-23-sublime-snippet/"/>
    <id>/2013/10/23/2013-10-23-sublime-snippet/</id>
    <published>2013-10-23T06:20:00.000Z</published>
    <updated>2014-11-15T05:38:50.000Z</updated>
    <content type="html"><![CDATA[<p><code>tools-&gt;New Snippet</code>新建一个snippet，保存为**.sublime-snippet。<br>内容如下：  </p>
<a id="more"></a>

<p><figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">snippet</span>&gt;</span>
    <span class="tag">&lt;<span class="title">content</span>&gt;</span>
    <span class="cdata">&lt;![CDATA[
&lt;!DOCTYPE HTML&gt; 
&lt;html&gt; 
&lt;head&gt; 
    &lt;meta charset="utf-8"&gt; 
    &lt;title&gt;${1}&lt;/title&gt; 
&lt;/head&gt;
&lt;body&gt;
    ${1}
&lt;/body&gt;
&lt;/html&gt;
    ]]&gt;</span>
    <span class="tag">&lt;/<span class="title">content</span>&gt;</span>
    <span class="comment">&lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;</span>
    <span class="tag">&lt;<span class="title">tabTrigger</span>&gt;</span>myhtml<span class="tag">&lt;/<span class="title">tabTrigger</span>&gt;</span>
    <span class="comment">&lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;</span>
    <span class="comment">&lt;!-- &lt;scope&gt;source.python&lt;/scope&gt; --&gt;</span>
<span class="tag">&lt;/<span class="title">snippet</span>&gt;</span>sublime-snippet
</pre></td></tr></table></figure><br>重启sublime，新建文件输入myhtml，然后按<code>tab</code>。</p>
]]></content>
    <summary type="html"><![CDATA[<p><code>tools-&gt;New Snippet</code>新建一个snippet，保存为**.sublime-snippet。<br>内容如下：  </p>
]]></summary>
    
      <category term="sublime" scheme="/categories/sublime/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[struts2文件上传]]></title>
    <link href="/2013/10/23/2013-10-23-struts-uploadfile/"/>
    <id>/2013/10/23/2013-10-23-struts-uploadfile/</id>
    <published>2013-10-23T01:02:00.000Z</published>
    <updated>2014-11-15T05:38:38.000Z</updated>
    <content type="html"><![CDATA[<p>注意保持action中File的变量和jsp中input的name名相同。<br>action中定义变量：</p>
<a id="more"></a>

<p><figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="keyword">package</span> action;
<span class="keyword">import</span> java.io.File;
<span class="keyword">import</span> java.io.FileInputStream;
<span class="keyword">import</span> java.io.FileOutputStream;
<span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadFileAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> {</span>
    
    <span class="comment">// 上传的文件</span>
    <span class="keyword">private</span> File upload;
    
    <span class="comment">// 上传的文件名</span>
    <span class="keyword">private</span> String uploadFileName;
    
    <span class="comment">// 上传的文件类型</span>
    <span class="keyword">private</span> String uploadContentType;
    
    <span class="keyword">public</span> String <span class="title">execute</span>() <span class="keyword">throws</span> Exception {
        FileInputStream fis = <span class="keyword">new</span> FileInputStream(upload);
        File file = <span class="keyword">new</span> File(<span class="string">"E:/dsideal/upload/"</span> +  uploadFileName);
        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);
        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8912</span>];
        <span class="keyword">int</span> count = <span class="number">0</span>;
        <span class="keyword">while</span>((count = fis.read(buffer)) != -<span class="number">1</span>) {
            fos.write(buffer, <span class="number">0</span>, count);
        }
        fos.close();
        fis.close();
        <span class="keyword">return</span> SUCCESS;
    }
    
    <span class="comment">/* set、get method */</span>
}
</pre></td></tr></table></figure><br>jsp页面:</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>&lt;s:form action="mystruts/uploadFile.action" enctype="multipart/form-data"&gt;
    &lt;s:file name="upload" label="输入要上传的文件名字" /&gt;
    &lt;s:submit value="上传" /&gt;
    &lt;/s:form&gt;
&lt;/body&gt;
</pre></td></tr></table></figure><br>使用了struts标签，也可以直接使用html表单标签form、input</p>
]]></content>
    <summary type="html"><![CDATA[<p>注意保持action中File的变量和jsp中input的name名相同。<br>action中定义变量：</p>
]]></summary>
    
      <category term="struts" scheme="/categories/struts/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JSON和bean互转]]></title>
    <link href="/2013/10/21/2013-10-21-json-to-bean/"/>
    <id>/2013/10/21/2013-10-21-json-to-bean/</id>
    <published>2013-10-21T01:32:00.000Z</published>
    <updated>2014-11-15T05:38:32.000Z</updated>
    <content type="html"><![CDATA[<p>需要用到的类：</p>
<pre><code>net<span class="preprocessor">.sf</span><span class="preprocessor">.json</span><span class="preprocessor">.JSONObject</span>  
</code></pre><p>在包<code>json-lib-2.3-jdk15</code>中</p>
<a id="more"></a>

<p>maven依赖：</p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>net.sf.json-lib<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>json-lib<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
    <span class="tag">&lt;<span class="title">classifier</span>&gt;</span>jdk15<span class="tag">&lt;/<span class="title">classifier</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
</pre></td></tr></table></figure><br>将bean转换成JSONObject，调用<code>JSONObject.fromObject(object)</code><br>如：</p>
<pre><code><span class="attribute">JSONObject jsonObject </span>=<span class="string"> JSONObject.fromObject(user);</span>
</code></pre><p>将JSONObject转换成bean，调用<code>JSONObject.toBean(jsonObject, beanClass)</code><br>如：</p>
<pre><code>User user = (User) JSONObject<span class="preprocessor">.toBean</span>(jsonObject, User<span class="preprocessor">.class</span>)<span class="comment">;</span>
</code></pre>]]></content>
    <summary type="html"><![CDATA[<p>需要用到的类：</p>
<pre><code>net<span class="preprocessor">.sf</span><span class="preprocessor">.json</span><span class="preprocessor">.JSONObject</span>  
</code></pre><p>在包<code>json-lib-2.3-jdk15</code>中</p>
]]></summary>
    
      <category term="java" scheme="/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[删除Java集合中元素]]></title>
    <link href="/2013/10/13/2013-10-13-remove-elemetns/"/>
    <id>/2013/10/13/2013-10-13-remove-elemetns/</id>
    <published>2013-10-13T13:42:00.000Z</published>
    <updated>2014-11-15T05:38:24.000Z</updated>
    <content type="html"><![CDATA[<p>有时候我们需要删除list中的某个元素，最开始我会这样写：</p>
<a id="more"></a>

<p><figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> {</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
        List&lt;Integer&gt; numbers = <span class="keyword">new</span> ArrayList();
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>; ++i) {
            numbers.add(i);
        }

        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>; ++i) {
            <span class="keyword">if</span>(numbers.get(i) == <span class="number">5</span>) {
                numbers.remove(i);
            }
        }

        System.out.println(numbers);
    }
}
</pre></td></tr></table></figure><br>这样写之后，会报错。因为list在循环中的时候是不可以删除它的元素的。<br>对上面的代码进行一点下改进就可以删除list中的元素了，就是在<code>remove</code>之后加个<code>break</code>就可以了。</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> {</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
        List&lt;Integer&gt; numbers = <span class="keyword">new</span> ArrayList();
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>; ++i) {
            numbers.add(i);
        }

        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>; ++i) {
            <span class="keyword">if</span>(numbers.get(i) == <span class="number">5</span>) {
                numbers.remove(i);
                <span class="keyword">break</span>;
            }
        }

        System.out.println(numbers);
    }
}
</pre></td></tr></table></figure><br>上面的方法适用于只删除一个元素，可有的时候我们需要删除多个元素，上面的方法虽可行，但需要为每个需要删除的元素写个for循环，这样效率太低了。<br>使用<code>Iterator</code>可以完成上面的操作。</p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> {</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
        List&lt;Integer&gt; numbers = <span class="keyword">new</span> ArrayList();
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>; ++i) {
            numbers.add(i);
        }

        <span class="keyword">for</span>(Iterator it=numbers.iterator() ;it.hasNext(); ) {
            Integer tmp = (Integer) it.next();
            <span class="keyword">if</span>(tmp == <span class="number">5</span>) {
                it.remove();
            }
            <span class="keyword">if</span>(tmp == <span class="number">7</span>) {
                it.remove();
            }
        }

        System.out.println(numbers);
    }
}
</pre></td></tr></table></figure><br>上面的方法虽都可以删除元素，但都需要for循环，效率不高，但没有找到更好的方法。感觉java的Iterator没有c++的那么只能，用起来没有c++顺手。</p>
<blockquote>
<p>对Java的基础知识了解越多，代码就会写得越简洁</p>
</blockquote>
]]></content>
    <summary type="html"><![CDATA[<p>有时候我们需要删除list中的某个元素，最开始我会这样写：</p>
]]></summary>
    
      <category term="java" scheme="/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[命令行修复MBR]]></title>
    <link href="/2013/10/09/2013-10-09-minglinghangmbr/"/>
    <id>/2013/10/09/2013-10-09-minglinghangmbr/</id>
    <published>2013-10-09T08:22:00.000Z</published>
    <updated>2014-11-15T05:38:14.000Z</updated>
    <content type="html"><![CDATA[<p>命令行修复MBR  </p>
<pre><code><span class="bullet">1. </span>shift+F10打开命令行
<span class="bullet">2. </span>输入：diskpart
<span class="bullet">3. </span>输入：list disk 查看磁盘信息
<span class="bullet">4. </span>选择你要操作的磁盘：
select disk 0
<span class="bullet">5. </span>输入：clean,清除分区
<span class="bullet">6. </span>输入：convert mbr 转换为MBR分区
<span class="bullet">7. </span>退出，重新分区OK
</code></pre><p>注意：在做以上操作的时候先备份文件</p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[项目发布]]></title>
    <link href="/2013/10/09/2013-10-09-xiangmufabu/"/>
    <id>/2013/10/09/2013-10-09-xiangmufabu/</id>
    <published>2013-10-09T01:40:00.000Z</published>
    <updated>2014-11-15T05:38:07.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>去发布目录下建立相应的文件夹  </li>
<li>更改发布脚本  </li>
<li>执行脚本  </li>
<li>接下来就分两种情况了  </li>
</ol>
<a id="more"></a>

<p>4.1.静态网站<br>修改<code>nginx</code>配置文件<code>nginx.conf</code><br>在最后加上如下代码：  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre>server {
        listen       <span class="number">192.168</span><span class="number">.1</span>.xx:<span class="number">80</span>;
        server_name  xxx.net;
        charset utf-<span class="number">8</span>;

        location / {
            root   /leave/xx/deploy/xx;

            autoindex <span class="function_start"><span class="keyword">on</span></span>;
            autoindex_exact_size off;
            autoindex_localtime <span class="function_start"><span class="keyword">on</span></span>;

            index  index.html;
        }
   }
<span class="comment">#ps:xx根据实际情况修改</span>
</pre></td></tr></table></figure><br>4.2. java web网站<br>(1)修改<code>nginx</code>配置文件<code>nginx.conf</code><br>在最后加上如下代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre>server {
        listen       <span class="number">192.168</span><span class="number">.1</span><span class="built_in">.</span>x:<span class="number">80</span>;
        server_name  xxx<span class="built_in">.</span>net;
        charset utf<span class="subst">-</span><span class="number">8</span>;

        location <span class="subst">/</span> {
                proxy_set_header   Host             <span class="variable">$host</span>;
                proxy_set_header   X<span class="attribute">-Real</span><span class="attribute">-IP</span>        <span class="variable">$remote_addr</span>;
                proxy_set_header  X<span class="attribute">-Forwarded</span><span class="attribute">-For</span>  <span class="variable">$proxy_add_x_forwarded_for</span>;
                client_max_body_size       <span class="number">1024</span>m;
                client_body_buffer_size    <span class="number">128</span>k;
                client_body_temp_path      <span class="built_in">data</span>/client_body_temp;
                proxy_connect_timeout      <span class="number">90</span>;
                proxy_send_timeout         <span class="number">90</span>;
                proxy_read_timeout         <span class="number">90</span>;
                proxy_buffer_size          <span class="number">4</span>k;
                proxy_buffers              <span class="number">4</span> <span class="number">32</span>k;
                proxy_busy_buffers_size    <span class="number">64</span>k;
                proxy_temp_file_write_size <span class="number">64</span>k;
                proxy_temp_path            <span class="built_in">data</span>/proxy_temp;
                proxy_pass http:<span class="comment">//127.0.0.1:8080;</span>
        }
   }
<span class="variable">#ps</span>:xx根据实际情况修改
</pre></td></tr></table></figure><br>(2)修改tomcat配置文件server.xml<br>加上如下代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">Host</span> <span class="attribute">name</span>=<span class="value">"xxx.net"</span>  <span class="attribute">appBase</span>=<span class="value">"webapps"</span> <span class="attribute">unpackWARs</span>=<span class="value">"true"</span> <span class="attribute">autoDeploy</span>=<span class="value">"true"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">Context</span> <span class="attribute">path</span>=<span class="value">""</span> <span class="attribute">docBase</span>=<span class="value">"/xxx/deploy/xxx"</span> <span class="attribute">debug</span>=<span class="value">"0"</span> <span class="attribute">reloadable</span>=<span class="value">"true"</span> <span class="attribute">crossContext</span>=<span class="value">"true"</span> /&gt;</span>
<span class="tag">&lt;/<span class="title">Host</span>&gt;</span>
#ps:xx根据实际情况修改
</pre></td></tr></table></figure><br>5. 平滑重启nginx<br><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>ps <span class="attribute">-aux</span> <span class="subst">|</span> grep nginx
<span class="comment">// 找到nginx master的pid</span>
kill <span class="attribute">-HUP</span> pid
</pre></td></tr></table></figure><br>6. 如果是java web，还需重启tomcat<br>7. 更改路由<br><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>system-view
ip host xxx<span class="preprocessor">.net</span> <span class="number">192.168</span><span class="number">.1</span><span class="preprocessor">.xx</span>
</pre></td></tr></table></figure>
]]></content>
    <summary type="html"><![CDATA[<ol>
<li>去发布目录下建立相应的文件夹  </li>
<li>更改发布脚本  </li>
<li>执行脚本  </li>
<li>接下来就分两种情况了  </li>
</ol>
]]></summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[找数字分析（出现一次的数字）]]></title>
    <link href="/2013/10/07/2013-10-07-zhaoshuzi/"/>
    <id>/2013/10/07/2013-10-07-zhaoshuzi/</id>
    <published>2013-10-07T15:15:00.000Z</published>
    <updated>2014-11-15T05:37:50.000Z</updated>
    <content type="html"><![CDATA[<h2 id="原题">原题</h2>
<p>数组A中，除了某一个数字X之外，其他数字都出现了三次，而X出现了一次。请给出最快的方法找到X。</p>
<a id="more"></a>

<h2 id="分析">分析</h2>
<p>乍一看这个题目，不少同学立马给出了答案：异或。但举个例子，就会发现，异或是行不通的，一般的方法是利用异或的的如下特性：  </p>
<p>A xor A = 0<br>A xor 0 = A</p>
<p>但是这个题目中，数字都是奇数个的，直接采用之前类似题目的异或方法，已经不合适了。<br>除此之外，我们还可能想到如下的方法：  </p>
<p>采用hashmap，时间复杂度O(n)，空间复杂度O(n)  </p>
<p>对数组A进行排序，然后在遍历一次，时间复杂度O(nlogn)，空间复杂度O(1)  </p>
<p>是否还有一些效果更好的方法呢？这一类的题目，即使简单的异或不能解决，也可以从二进制位、位操作方面去考虑，总之这样的大方向是不会错的。  </p>
<p>题目中，如果数组中的元素都是三个三个出现的，那么从二进制表示的角度，每个位上的1加起来，应该可以整除3。如果有一个数x只出现一次，会是什么情况呢？  </p>
<p>如果某个特定位上的1加起来，可以被3整除，说明对应x的那位是0，因为如果是1，不可能被3整除<br>如果某个特定位上的1加起来，不可以被3整除，说明对应x的那位是1  </p>
<p>根据上面的描述，我们可以开辟一个大小为32的数组，第0个元素表示，A中所有元素的二进制表示的最低位的和，依次类推。最后，再转换为十进制数即可。这里要说明的是，用一个大小为32的整数数组表示，同样空间是O(1)的。<br>不过这里申请了一个数组的空间，如果这个是不被允许的呢？请大家开动脑筋，我们会在后续的文章中分享。  </p>
<p>代码：  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="preprocessor">#include &lt;stdio.h&gt;</span>
<span class="preprocessor">#include &lt;string.h&gt;</span>
<span class="preprocessor">#include &lt;iostream&gt;</span>
<span class="preprocessor">#include &lt;string&gt;</span>
<span class="preprocessor">#include &lt;algorithm&gt;</span>
<span class="preprocessor">#include &lt;map&gt;</span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;
<span class="keyword">int</span> a[<span class="number">1000</span>];
<span class="keyword">int</span> main() {
    <span class="keyword">int</span> n,i,j,k,cnt,ans;
    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &n);
    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n; ++i) {
        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &a[i]);
    }
    <span class="keyword">long</span> tmp = <span class="number">1</span>;
    ans = <span class="number">0</span>;
    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">32</span>; ++i) {
        cnt = <span class="number">0</span>;
        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; n; ++j) {
            cnt += a[j] & tmp;
        }
        <span class="keyword">if</span>(cnt % <span class="number">3</span> == <span class="number">0</span>) {
            ans = ans | (<span class="number">0</span>&lt;&lt;i);
        } <span class="keyword">else</span> {
            ans = ans | (<span class="number">1</span>&lt;&lt;i);
        }
        tmp = tmp &lt;&lt; <span class="number">1</span>;
    }
    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);
    <span class="keyword">return</span> <span class="number">0</span>;
}
</pre></td></tr></table></figure>
]]></content>
    <summary type="html"><![CDATA[<h2 id="原题">原题</h2>
<p>数组A中，除了某一个数字X之外，其他数字都出现了三次，而X出现了一次。请给出最快的方法找到X。</p>
]]></summary>
    
      <category term="面试题" scheme="/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[括号匹配]]></title>
    <link href="/2013/10/07/2013-10-07-kuohaopipei/"/>
    <id>/2013/10/07/2013-10-07-kuohaopipei/</id>
    <published>2013-10-07T08:36:00.000Z</published>
    <updated>2014-11-15T05:37:35.000Z</updated>
    <content type="html"><![CDATA[<h2 id="原题">原题</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;给定字符串，输出括号是否匹配，例如:  </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.”()” yes；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.”)(“ no；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.”(abcd(e)” no；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.”(a)(b)” yes。  </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要求必须用递归写，整个实现不可以出现一个循环语句.</p>
<a id="more"></a>

<h2 id="分析">分析</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个题目很多同学都见过了，如果没有后面的条件，会张口就说就来用栈来实现，时间复杂度O(n)，空间复杂度O(n)。这个是很好的一个解答，没有 问题的。但是我们在做面试题，准备面试的过程中，每一个题目都不应该仅仅局限于某一个方法。应该尝试更多的思路，尽管有些思路的时间、空间复杂度并不是很 好，但是可以带来变化，举一反三，这才是真正的收获。  </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个题要求了，只目能使用递归并且不能出现循环语句。这个时候，我们应该如何处理呢？其实告诉了大家递归，就比较好想了：怎么定义好问题和子问题。  </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果字符串中的括号是匹配的，则’(‘的数量和’)’的数量是相等的，反之是不相等的。这样，在递归的过程中，可以保存一个变量，用来记录’(‘的 数量和’)’的数量是否匹配。这样定义递归问题f(p,count)，表示当前字符p之前的字符串中’(‘的数量和’)’的数量的匹配情况，p表示指向当 前字符的指针。初始的时候，f(p, 0)，递归的过程如下：  </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果p为空，则考察count是否为0，如果为0，则匹配；如果不为0，则不匹配；  </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果不为空，则考察当前字符p，如果p=’(‘，则递归调用f(p++, count++);如果p=’)’，则递归调用f(p++, count—)。如果p是其他的字符，并不是’(‘和’)’，则递归调用f(p++, count)，count不变，继续考虑下一次字符。其中需要检查和保证count&gt;=0.  </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实，递归的问题有的时候不是那么好像的，需要大家不断的练习。如果不采用count来记录括号匹配的情况，这个题目的递归也不好想。<br>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="code"><pre><span class="preprocessor">#include &lt;stdio.h&gt;</span>
<span class="preprocessor">#include &lt;string.h&gt;</span>
<span class="preprocessor">#include &lt;iostream&gt;</span>
<span class="preprocessor">#include &lt;string&gt;</span>
<span class="preprocessor">#include &lt;algorithm&gt;</span>
<span class="preprocessor">#include &lt;map&gt;</span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;
<span class="keyword">char</span> s[<span class="number">10000</span>];
<span class="keyword">bool</span> match(<span class="keyword">char</span> *s,<span class="keyword">int</span> count) {
    <span class="keyword">if</span>(!*s && count==<span class="number">0</span>)
        <span class="keyword">return</span> <span class="keyword">true</span>;
    <span class="keyword">else</span> <span class="keyword">if</span>(!*s && count!=<span class="number">0</span>)
        <span class="keyword">return</span> <span class="keyword">false</span>;
    <span class="keyword">if</span>(count &lt; <span class="number">0</span>)
        <span class="keyword">return</span> <span class="keyword">false</span>;
    <span class="keyword">if</span>(*s == <span class="string">'('</span>)
        match(s+<span class="number">1</span>,count+<span class="number">1</span>);
    <span class="keyword">else</span> <span class="keyword">if</span>(*s == <span class="string">')'</span>)
        match(s+<span class="number">1</span>,count-<span class="number">1</span>);
    <span class="keyword">else</span>
        match(s+<span class="number">1</span>,count);
}
<span class="keyword">int</span> main() {
    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s)) {
        <span class="keyword">if</span>(match(s,<span class="number">0</span>)) {
            <span class="built_in">printf</span>(<span class="string">"yes!\n"</span>);
        }
        <span class="keyword">else</span> {
            <span class="built_in">printf</span>(<span class="string">"no!\n"</span>);
        }
    }
    <span class="keyword">return</span> <span class="number">0</span>;
}
</pre></td></tr></table></figure>
]]></content>
    <summary type="html"><![CDATA[<h2 id="原题">原题</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;给定字符串，输出括号是否匹配，例如:  </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.”()” yes；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.”)(“ no；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.”(abcd(e)” no；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.”(a)(b)” yes。  </p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要求必须用递归写，整个实现不可以出现一个循环语句.</p>
]]></summary>
    
      <category term="面试题" scheme="/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
